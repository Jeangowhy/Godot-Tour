[gd_scene load_steps=1 format=2]

[ext_resource id=1 path="index_render.jpg" type="Texture"]

[sub_resource id=1 type="Shader"]

resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;

uniform sampler2D texture_0: hint_albedo;


void euler_angle_XYZ_to_mat4(in vec3 rot, out mat4 rot_mat) {
    mat3 rx = mat3(vec3(1, 0, 0),
                   vec3(0, cos(rot.x), sin(rot.x)),
                   vec3(0, -sin(rot.x), cos(rot.x)));
    mat3 ry = mat3(vec3(cos(rot.y), 0, -sin(rot.y)),
                   vec3(0, 1, 0),
                   vec3(sin(rot.y), 0, cos(rot.y)));
    mat3 rz = mat3(vec3(cos(rot.z), sin(rot.z), 0),
                   vec3(-sin(rot.z), cos(rot.z), 0),
                   vec3(0, 0, 1));
    rot_mat = mat4(rz * ry * rx);
}


void location_to_mat4(in vec3 loc, out mat4 loc_mat) {
    loc_mat = mat4(vec4(1.0, 0.0, 0.0, 0),
                   vec4(0.0, 1.0, 0.0, 0),
                   vec4(0.0, 0.0, 1.0, 0),
                   vec4(loc, 1.0));
}


void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}


void node_tex_image(vec3 co, sampler2D ima, out vec4 color, out float alpha) {
    color = texture(ima, co.xy);
    alpha = color.a;
}


void scale_to_mat4(in vec3 scale, out mat4 scale_mat) {
    scale_mat = mat4(vec4(scale.x, 0.0, 0.0, 0.0),
                     vec4(0.0, scale.y, 0.0, 0.0),
                     vec4(0.0, 0.0, scale.z, 0.0),
                     vec4(0.0, 0.0, 0.0, 1.0));
}

void vertex () {
}

void fragment () {
	
	// node: 'Texture Coordinate'
	// type: 'ShaderNodeTexCoord'
	// input sockets handling
	// output sockets definitions
	vec3 node0_out0_uv;
	
	node0_out0_uv = vec3(UV, 0.0);
	
	
	// node: 'Mapping'
	// type: 'ShaderNodeMapping'
	// input sockets handling
	vec3 node1_in0_vector = node0_out0_uv;
	vec3 node1_in1_location = vec3(0.0, 0.0, 0.0);
	vec3 node1_in2_rotation = vec3(0.0, 0.0, 0.0);
	vec3 node1_in3_scale = vec3(1.0, 1.0, 1.0);
	// output sockets definitions
	vec3 node1_out0_vector;
	
	// Mapping type: POINT
	mat4 node1_var0_location;
	location_to_mat4(node1_in1_location, node1_var0_location);
	mat4 node1_var1_rotation;
	euler_angle_XYZ_to_mat4(node1_in2_rotation, node1_var1_rotation);
	mat4 node1_var2_scale;
	scale_to_mat4(node1_in3_scale, node1_var2_scale);
	mat4 node1_var3_xform_mat = node1_var0_location * node1_var1_rotation *
		node1_var2_scale;
	node1_out0_vector = (node1_var3_xform_mat * vec4(node1_in0_vector, 1.0)).xyz;
	
	
	// node: 'Attribute'
	// type: 'ShaderNodeAttribute'
	// input sockets handling
	// output sockets definitions
	
	// Warn: node not supported
	
	
	// node: 'Image Texture'
	// type: 'ShaderNodeTexImage'
	// input sockets handling
	vec3 node3_in0_vector = vec3(0.0, 0.0, 0.0);
	// output sockets definitions
	vec4 node3_out0_color;
	float node3_out1_alpha;
	
	node_tex_image(node3_in0_vector, texture_0, node3_out0_color, node3_out1_alpha);
	
	
	// node: 'Principled BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node4_in0_basecolor = node3_out0_color;
	float node4_in1_subsurface = float(0.0);
	vec3 node4_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node4_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node4_in4_subsurfaceior = float(1.399999976158142);
	float node4_in5_subsurfaceanisotropy = float(0.0);
	float node4_in6_metallic = float(0.0);
	float node4_in7_specular = float(0.5);
	float node4_in8_speculartint = float(0.0);
	float node4_in9_roughness = float(0.5);
	float node4_in10_anisotropic = float(0.0);
	float node4_in11_anisotropicrotation = float(0.0);
	float node4_in12_sheen = float(0.0);
	float node4_in13_sheentint = float(0.5);
	float node4_in14_clearcoat = float(0.0);
	float node4_in15_clearcoatroughness = float(0.029999999329447746);
	float node4_in16_ior = float(1.4500000476837158);
	float node4_in17_transmission = float(0.0);
	float node4_in18_transmissionroughness = float(0.0);
	vec4 node4_in19_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node4_in20_emissionstrength = float(1.0);
	float node4_in21_alpha = float(1.0);
	vec3 node4_in22_normal = NORMAL;
	vec3 node4_in23_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node4_in24_tangent = TANGENT;
	float node4_in25_weight = float(0.0);
	// output sockets definitions
	vec3 node4_bsdf_out0_albedo;
	float node4_bsdf_out1_sss_strength;
	float node4_bsdf_out3_specular;
	float node4_bsdf_out2_metallic;
	float node4_bsdf_out4_roughness;
	float node4_bsdf_out5_clearcoat;
	float node4_bsdf_out6_clearcoat_gloss;
	float node4_bsdf_out7_anisotropy;
	float node4_bsdf_out8_transmission;
	float node4_bsdf_out9_ior;
	
	node_bsdf_principled(node4_in0_basecolor, node4_in1_subsurface,
		node4_in3_subsurfacecolor, node4_in6_metallic, node4_in7_specular,
		node4_in9_roughness, node4_in14_clearcoat, node4_in15_clearcoatroughness,
		node4_in10_anisotropic, node4_in17_transmission, node4_in16_ior,
		node4_bsdf_out0_albedo, node4_bsdf_out1_sss_strength, node4_bsdf_out2_metallic,
		node4_bsdf_out3_specular, node4_bsdf_out4_roughness, node4_bsdf_out5_clearcoat,
		node4_bsdf_out6_clearcoat_gloss, node4_bsdf_out7_anisotropy,
		node4_bsdf_out8_transmission, node4_bsdf_out9_ior);
	
	
	ALBEDO = node4_bsdf_out0_albedo;
	SSS_STRENGTH = node4_bsdf_out1_sss_strength;
	SPECULAR = node4_bsdf_out3_specular;
	METALLIC = node4_bsdf_out2_metallic;
	ROUGHNESS = node4_bsdf_out4_roughness;
	CLEARCOAT = node4_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node4_bsdf_out6_clearcoat_gloss;
	NORMAL = node4_in22_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node4_bsdf_out8_transmission;
	// uncomment it when you are modifing TANGENT
	// TANGENT = normalize(cross(cross(node4_in24_tangent, NORMAL), NORMAL));
	// BINORMAL = cross(TANGENT, NORMAL);
	// uncomment it when you have tangent(UV) set
	// ANISOTROPY = node4_bsdf_out7_anisotropy;
}
"

[sub_resource id=2 type="ShaderMaterial"]

resource_name = ""
shader = SubResource(1)
shader_param/texture_0 = ExtResource(1)

[sub_resource id=3 type="ArrayMesh"]

resource_name = "Cube001"
surfaces/0 = {
	"material":SubResource(2),
	"primitive":4,
	"arrays":[
		Vector3Array(-4.41081, -2.0, 4.15533, -4.41081, -0.00999171, 4.35499, -4.61622, 0.192814, 2.31257, -4.61622, -1.79719, 2.1129, -4.61622, -1.79719, 2.1129, -4.61622, 0.192814, 2.31257, -2.61622, 0.192814, 2.31257, -2.61622, -1.79719, 2.1129, -2.61622, -1.79719, 2.1129, -2.61622, 0.192814, 2.31257, -2.41081, -0.00999171, 4.35499, -2.41081, -2.0, 4.15533, -2.41081, -2.0, 4.15533, -2.41081, -0.00999171, 4.35499, -4.41081, -0.00999171, 4.35499, -4.41081, -2.0, 4.15533, -4.61622, -1.79719, 2.1129, -2.61622, -1.79719, 2.1129, -2.41081, -2.0, 4.15533, -4.41081, -2.0, 4.15533, -2.61622, 0.192814, 2.31257, -4.61622, 0.192814, 2.31257, -4.41081, -0.00999171, 4.35499, -2.41081, -0.00999171, 4.35499, -4.41081, -0.00999171, 4.35499, -4.41081, 1.98002, 4.55466, -4.61622, 2.18282, 2.51224, -4.61622, 0.192814, 2.31257, -4.61622, 0.192814, 2.31257, -4.61622, 2.18282, 2.51224, -2.61622, 2.18282, 2.51224, -2.61622, 0.192814, 2.31257, -2.61622, 0.192814, 2.31257, -2.61622, 2.18282, 2.51224, -2.41081, 1.98002, 4.55466, -2.41081, -0.00999171, 4.35499, -2.41081, -0.00999171, 4.35499, -2.41081, 1.98002, 4.55466, -4.41081, 1.98002, 4.55466, -4.41081, -0.00999171, 4.35499, -4.61622, 0.192814, 2.31257, -2.61622, 0.192814, 2.31257, -2.41081, -0.00999171, 4.35499, -4.41081, -0.00999171, 4.35499, -2.61622, 2.18282, 2.51224, -4.61622, 2.18282, 2.51224, -4.41081, 1.98002, 4.55466, -2.41081, 1.98002, 4.55466, -4.61622, -1.79719, 2.1129, -4.61622, 0.192814, 2.31257, -4.82162, 0.395619, 0.270147, -4.82162, -1.59439, 0.0704803, -4.82162, -1.59439, 0.0704803, -4.82162, 0.395619, 0.270147, -2.82162, 0.395619, 0.270147, -2.82162, -1.59439, 0.0704803, -2.82162, -1.59439, 0.0704803, -2.82162, 0.395619, 0.270147, -2.61622, 0.192814, 2.31257, -2.61622, -1.79719, 2.1129, -2.61622, -1.79719, 2.1129, -2.61622, 0.192814, 2.31257, -4.61622, 0.192814, 2.31257, -4.61622, -1.79719, 2.1129, -4.82162, -1.59439, 0.0704803, -2.82162, -1.59439, 0.0704803, -2.82162, 0.395619, 0.270147, -4.82162, 0.395619, 0.270147, -4.61622, 0.192814, 2.31257, -2.61622, 0.192814, 2.31257, -4.61622, 0.192814, 2.31257, -4.61622, 2.18282, 2.51224, -4.82162, 2.38563, 0.469814, -4.82162, 0.395619, 0.270147, -4.82162, 2.38563, 0.469814, -2.82162, 2.38563, 0.469814, -2.82162, 0.395619, 0.270147, -2.82162, 2.38563, 0.469814, -2.61622, 2.18282, 2.51224, -2.61622, 0.192814, 2.31257, -2.61622, 0.192814, 2.31257, -2.61622, 2.18282, 2.51224, -4.61622, 2.18282, 2.51224, -4.61622, 0.192814, 2.31257, -4.82162, 0.395619, 0.270147, -2.82162, 0.395619, 0.270147, -2.61622, 0.192814, 2.31257, -4.61622, 0.192814, 2.31257, -2.82162, 2.38563, 0.469814, -4.82162, 2.38563, 0.469814, -4.61622, 2.18282, 2.51224, -2.61622, 2.18282, 2.51224, -2.41081, -2.0, 4.15533, -2.41081, -0.00999171, 4.35499, -2.61622, 0.192814, 2.31257, -2.61622, -1.79719, 2.1129, -2.61622, -1.79719, 2.1129, -2.61622, 0.192814, 2.31257, -0.616216, 0.192814, 2.31257, -0.616216, -1.79719, 2.1129, -0.616216, -1.79719, 2.1129, -0.616216, 0.192814, 2.31257, -0.410811, -0.00999171, 4.35499, -0.410811, -2.0, 4.15533, -0.410811, -2.0, 4.15533, -0.410811, -0.00999171, 4.35499, -2.61622, -1.79719, 2.1129, -0.616216, -1.79719, 2.1129, -0.410811, -2.0, 4.15533, -2.41081, -2.0, 4.15533, -0.616216, 0.192814, 2.31257, -2.61622, 0.192814, 2.31257, -2.41081, -0.00999171, 4.35499, -0.410811, -0.00999171, 4.35499, -2.41081, -0.00999171, 4.35499, -2.41081, 1.98002, 4.55466, -2.61622, 2.18282, 2.51224, -2.61622, 0.192814, 2.31257, -2.61622, 0.192814, 2.31257, -2.61622, 2.18282, 2.51224, -0.616216, 2.18282, 2.51224, -0.616216, 0.192814, 2.31257, -0.616216, 0.192814, 2.31257, -0.616216, 2.18282, 2.51224, -0.410811, 1.98002, 4.55466, -0.410811, -0.00999171, 4.35499, -0.410811, -0.00999171, 4.35499, -0.410811, 1.98002, 4.55466, -2.61622, 0.192814, 2.31257, -0.616216, 0.192814, 2.31257, -0.410811, -0.00999171, 4.35499, -2.41081, -0.00999171, 4.35499, -0.616216, 2.18282, 2.51224, -2.61622, 2.18282, 2.51224, -2.41081, 1.98002, 4.55466, -0.410811, 1.98002, 4.55466, -2.61622, -1.79719, 2.1129, -2.61622, 0.192814, 2.31257, -2.82162, 0.395619, 0.270147, -2.82162, -1.59439, 0.0704803, -2.82162, -1.59439, 0.0704803, -2.82162, 0.395619, 0.270147, -0.821622, 0.395619, 0.270147, -0.821622, -1.59439, 0.0704803, -0.821622, -1.59439, 0.0704803, -0.821622, 0.395619, 0.270147, -0.616216, 0.192814, 2.31257, -0.616216, -1.79719, 2.1129, -0.616216, -1.79719, 2.1129, -0.616216, 0.192814, 2.31257, -2.61622, 0.192814, 2.31257, -2.61622, -1.79719, 2.1129, -2.82162, -1.59439, 0.0704803, -0.821622, -1.59439, 0.0704803, -0.821622, 0.395619, 0.270147, -0.616216, 0.192814, 2.31257, -2.61622, 0.192814, 2.31257, -2.61622, 2.18282, 2.51224, -2.82162, 2.38563, 0.469814, -2.82162, 0.395619, 0.270147, -0.821622, 2.38563, 0.469814, -0.821622, 0.395619, 0.270147, -0.821622, 0.395619, 0.270147, -0.821622, 2.38563, 0.469814, -0.616216, 2.18282, 2.51224, -0.616216, 0.192814, 2.31257, -0.616216, 0.192814, 2.31257, -0.616216, 2.18282, 2.51224, -2.61622, 2.18282, 2.51224, -2.61622, 0.192814, 2.31257, -2.82162, 0.395619, 0.270147, -0.821622, 0.395619, 0.270147, -0.616216, 0.192814, 2.31257, -2.61622, 0.192814, 2.31257, -0.821622, 2.38563, 0.469814, -2.82162, 2.38563, 0.469814, -2.61622, 2.18282, 2.51224, -0.616216, 2.18282, 2.51224),
		Vector3Array(-0.99503, -0.00994142, 0.0990824, -0.99503, -0.00994142, 0.0990824, -0.99503, -0.00994142, 0.0990824, -0.99503, -0.00994142, 0.0990824, 0.0, 0.0998335, -0.995004, 0.0, 0.0998335, -0.995004, 0.0, 0.0998335, -0.995004, 0.0, 0.0998335, -0.995004, 0.99503, 0.00994142, -0.0990825, 0.99503, 0.00994142, -0.0990825, 0.99503, 0.00994142, -0.0990825, 0.99503, 0.00994142, -0.0990825, 0.0, -0.0998335, 0.995004, 0.0, -0.0998335, 0.995004, 0.0, -0.0998335, 0.995004, 0.0, -0.0998335, 0.995004, 0.0, -0.995106, -0.0988106, 0.0, -0.995106, -0.0988106, 0.0, -0.995106, -0.0988106, 0.0, -0.995106, -0.0988106, 0.0, 0.995106, 0.0988106, 0.0, 0.995106, 0.0988106, 0.0, 0.995106, 0.0988106, 0.0, 0.995106, 0.0988106, -0.99503, -0.0099414, 0.0990824, -0.99503, -0.0099414, 0.0990824, -0.99503, -0.0099414, 0.0990824, -0.99503, -0.0099414, 0.0990824, 0.0, 0.0998334, -0.995004, 0.0, 0.0998334, -0.995004, 0.0, 0.0998334, -0.995004, 0.0, 0.0998334, -0.995004, 0.99503, 0.0099414, -0.0990825, 0.99503, 0.0099414, -0.0990825, 0.99503, 0.0099414, -0.0990825, 0.99503, 0.0099414, -0.0990825, 0.0, -0.0998333, 0.995004, 0.0, -0.0998333, 0.995004, 0.0, -0.0998333, 0.995004, 0.0, -0.0998333, 0.995004, 0.0, -0.995106, -0.0988106, 0.0, -0.995106, -0.0988106, 0.0, -0.995106, -0.0988106, 0.0, -0.995106, -0.0988106, 0.0, 0.995106, 0.0988107, 0.0, 0.995106, 0.0988107, 0.0, 0.995106, 0.0988107, 0.0, 0.995106, 0.0988107, -0.99503, -0.00994139, 0.0990824, -0.99503, -0.00994139, 0.0990824, -0.99503, -0.00994139, 0.0990824, -0.99503, -0.00994139, 0.0990824, 0.0, 0.0998334, -0.995004, 0.0, 0.0998334, -0.995004, 0.0, 0.0998334, -0.995004, 0.0, 0.0998334, -0.995004, 0.99503, 0.00994141, -0.0990824, 0.99503, 0.00994141, -0.0990824, 0.99503, 0.00994141, -0.0990824, 0.99503, 0.00994141, -0.0990824, 0.0, -0.0998334, 0.995004, 0.0, -0.0998334, 0.995004, 0.0, -0.0998334, 0.995004, 0.0, -0.0998334, 0.995004, 0.0, -0.995106, -0.0988106, 0.0, -0.995106, -0.0988106, 0.0, 0.995106, 0.0988107, 0.0, 0.995106, 0.0988107, 0.0, 0.995106, 0.0988107, 0.0, 0.995106, 0.0988107, -0.99503, -0.00994138, 0.0990824, -0.99503, -0.00994138, 0.0990824, -0.99503, -0.00994138, 0.0990824, -0.99503, -0.00994138, 0.0990824, 0.0, 0.0998334, -0.995004, 0.0, 0.0998334, -0.995004, 0.99503, 0.0099414, -0.0990825, 0.99503, 0.0099414, -0.0990825, 0.99503, 0.0099414, -0.0990825, 0.99503, 0.0099414, -0.0990825, 0.0, -0.0998332, 0.995004, 0.0, -0.0998332, 0.995004, 0.0, -0.0998332, 0.995004, 0.0, -0.0998332, 0.995004, 0.0, -0.995106, -0.0988106, 0.0, -0.995106, -0.0988106, 0.0, -0.995106, -0.0988106, 0.0, -0.995106, -0.0988106, 0.0, 0.995106, 0.0988106, 0.0, 0.995106, 0.0988106, 0.0, 0.995106, 0.0988106, 0.0, 0.995106, 0.0988106, -0.99503, -0.00994142, 0.0990824, -0.99503, -0.00994142, 0.0990824, -0.99503, -0.00994142, 0.0990824, -0.99503, -0.00994142, 0.0990824, 0.0, 0.0998335, -0.995004, 0.0, 0.0998335, -0.995004, 0.0, 0.0998335, -0.995004, 0.0, 0.0998335, -0.995004, 0.99503, 0.00994142, -0.0990825, 0.99503, 0.00994142, -0.0990825, 0.99503, 0.00994142, -0.0990825, 0.99503, 0.00994142, -0.0990825, 0.0, -0.0998335, 0.995004, 0.0, -0.0998335, 0.995004, 0.0, -0.995106, -0.0988106, 0.0, -0.995106, -0.0988106, 0.0, -0.995106, -0.0988106, 0.0, -0.995106, -0.0988106, 0.0, 0.995106, 0.0988107, 0.0, 0.995106, 0.0988107, 0.0, 0.995106, 0.0988107, 0.0, 0.995106, 0.0988107, -0.99503, -0.0099414, 0.0990824, -0.99503, -0.0099414, 0.0990824, -0.99503, -0.0099414, 0.0990824, -0.99503, -0.0099414, 0.0990824, 0.0, 0.0998334, -0.995004, 0.0, 0.0998334, -0.995004, 0.0, 0.0998334, -0.995004, 0.0, 0.0998334, -0.995004, 0.99503, 0.0099414, -0.0990825, 0.99503, 0.0099414, -0.0990825, 0.99503, 0.0099414, -0.0990825, 0.99503, 0.0099414, -0.0990825, 0.0, -0.0998333, 0.995004, 0.0, -0.0998333, 0.995004, 0.0, -0.995106, -0.0988106, 0.0, -0.995106, -0.0988106, 0.0, -0.995106, -0.0988106, 0.0, -0.995106, -0.0988106, 0.0, 0.995106, 0.0988107, 0.0, 0.995106, 0.0988107, 0.0, 0.995106, 0.0988107, 0.0, 0.995106, 0.0988107, -0.99503, -0.00994141, 0.0990824, -0.99503, -0.00994141, 0.0990824, -0.99503, -0.00994141, 0.0990824, -0.99503, -0.00994141, 0.0990824, 0.0, 0.0998334, -0.995004, 0.0, 0.0998334, -0.995004, 0.0, 0.0998334, -0.995004, 0.0, 0.0998334, -0.995004, 0.99503, 0.00994141, -0.0990825, 0.99503, 0.00994141, -0.0990825, 0.99503, 0.00994141, -0.0990825, 0.99503, 0.00994141, -0.0990825, 0.0, -0.0998334, 0.995004, 0.0, -0.0998334, 0.995004, 0.0, -0.0998334, 0.995004, 0.0, -0.0998334, 0.995004, 0.0, -0.995106, -0.0988106, 0.0, -0.995106, -0.0988106, 0.0, 0.995106, 0.0988107, 0.0, 0.995106, 0.0988107, -0.99503, -0.0099414, 0.0990825, -0.99503, -0.0099414, 0.0990825, -0.99503, -0.0099414, 0.0990825, -0.99503, -0.0099414, 0.0990825, 0.0, 0.0998334, -0.995004, 0.0, 0.0998334, -0.995004, 0.99503, 0.0099414, -0.0990825, 0.99503, 0.0099414, -0.0990825, 0.99503, 0.0099414, -0.0990825, 0.99503, 0.0099414, -0.0990825, 0.0, -0.0998333, 0.995004, 0.0, -0.0998333, 0.995004, 0.0, -0.0998333, 0.995004, 0.0, -0.0998333, 0.995004, 0.0, -0.995106, -0.0988106, 0.0, -0.995106, -0.0988106, 0.0, -0.995106, -0.0988106, 0.0, -0.995106, -0.0988106, 0.0, 0.995106, 0.0988106, 0.0, 0.995106, 0.0988106, 0.0, 0.995106, 0.0988106, 0.0, 0.995106, 0.0988106),
		null, ; No Tangents,
		null, ; no Vertex Colors,
		null, ; No UV1,
		null, ; No UV2,
		null, ; No Bones,
		null, ; No Weights,
		IntArray(0, 2, 1, 0, 3, 2, 4, 6, 5, 4, 7, 6, 8, 10, 9, 8, 11, 10, 12, 14, 13, 12, 15, 14, 16, 18, 17, 16, 19, 18, 20, 22, 21, 20, 23, 22, 24, 26, 25, 24, 27, 26, 28, 30, 29, 28, 31, 30, 32, 34, 33, 32, 35, 34, 36, 38, 37, 36, 39, 38, 40, 42, 41, 40, 43, 42, 44, 46, 45, 44, 47, 46, 48, 50, 49, 48, 51, 50, 52, 54, 53, 52, 55, 54, 56, 58, 57, 56, 59, 58, 60, 62, 61, 60, 63, 62, 64, 17, 65, 64, 16, 17, 66, 68, 67, 66, 69, 68, 70, 72, 71, 70, 73, 72, 53, 75, 74, 53, 54, 75, 76, 78, 77, 76, 79, 78, 80, 82, 81, 80, 83, 82, 84, 86, 85, 84, 87, 86, 88, 90, 89, 88, 91, 90, 92, 94, 93, 92, 95, 94, 96, 98, 97, 96, 99, 98, 100, 102, 101, 100, 103, 102, 104, 13, 105, 104, 12, 13, 106, 108, 107, 106, 109, 108, 110, 112, 111, 110, 113, 112, 114, 116, 115, 114, 117, 116, 118, 120, 119, 118, 121, 120, 122, 124, 123, 122, 125, 124, 126, 37, 127, 126, 36, 37, 128, 130, 129, 128, 131, 130, 132, 134, 133, 132, 135, 134, 136, 138, 137, 136, 139, 138, 140, 142, 141, 140, 143, 142, 144, 146, 145, 144, 147, 146, 148, 150, 149, 148, 151, 150, 152, 107, 153, 152, 106, 107, 154, 69, 66, 154, 155, 69, 156, 158, 157, 156, 159, 158, 54, 160, 75, 54, 161, 160, 162, 164, 163, 162, 165, 164, 166, 168, 167, 166, 169, 168, 170, 172, 171, 170, 173, 172, 174, 176, 175, 174, 177, 176)
	],
	"morph_arrays":[]
}

[node type="Spatial" name="Scene"]

[node name="Cube" type="MeshInstance" parent="."]

mesh = SubResource(3)
visible = true
transform = Transform(0.914637, 0.0, -0.404276, 0.0, 1.0, 0.0, 0.404276, 0.0, 0.914637, 9.10651, -1.33528, -14.2789)
